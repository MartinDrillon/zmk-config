#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    behaviors {
        splo: space_lower {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_LOWER";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&mo 1>;
            mods = <(MOD_LSFT)>;
        };
    };
};

#define COMBO(NAME, TIME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <TIME>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
  };
//         ______________________      ________________________
//        |0  |1  |2  |3  |4  |5  |    |6  |7  |8  |9  |10 |11 |
//     ___|12 |13 |14 |15 |16 |17 |    |18 |19 |20 |21 |22 |23 |___
//    | 24|25 |26 |27 |28 |29 |30 |    |31 |32 |33 |34 |35 |36 | 37|
//     ‾‾‾‾‾‾‾‾‾‾‾|38 |39 |40 |41 |    |42 |43 |44 |45 |46 |‾‾‾‾‾‾‾‾               
//                 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
/ {
        combos {
                compatible = "zmk,combos";

                COMBO(circonflexe, 70, &kp Y, 33 34)
                COMBO(tiret, 70, &kp N8, 32 33)                

                COMBO(fleche_haut, 50, &kp UP, 3 15)
                COMBO(fleche_bas, 50, &kp DOWN, 15 28)
                COMBO(fleche_gauche, 50, &kp LEFT, 12 13)              
                COMBO(fleche_droite, 50, &kp RIGHT, 16 17)

                COMBO(supr, 50, &kp DEL, 4 16)
                COMBO(retour, 50, &kp BSPC, 18 19)
                COMBO(retour_bis, 50, &kp BSPC, 5 17)
                COMBO(enter_un, 80, &kp ENTER, 13 14 15 16)
                COMBO(enter_two, 80, &kp ENTER, 14 15 16)
                COMBO(esc, 50, &kp ESC, 0 1)

                COMBO(ctrl_z, 50, &kp LC(LBKT), 26 27)
                COMBO(ctrl_c, 50, &kp LC(H), 27 28)
                COMBO(ctrl_v, 50, &kp LC(U), 28 29)
                COMBO(ctrl_s, 50, &kp LC(K), 4 5) 

//                COMBO(lower, 100, &mo 1, 40 42)

        };

    keymap {
        compatible = "zmk,keymap";

        default_layer {

            bindings = <
          &kp TAB	    &kp Z	     &kp Q	   &kp W	 &kp V     &kp Y            &kp B	      &kp U	     &kp O	   &kp APOS	 &kp C	&kp BSLH
	        &kp G	      &kp R	     &kp S	   &kp A	 &kp D	   &kp P            &kp COMMA   &kp J	     &kp K	   &kp SEMI	 &kp L	&kp SLASH
&tog 2    &lt 2 RBKT  &kp M	     &kp X	   &kp T	 &kp E	   &kp NUBS         &kp N	      &kp I	     &kp LBKT  &kp DOT   &kp H	&mo 2   &mo 1  
                               &kp LALT  &kp LCTRL &kp LSHFT &kp F	          &splo   &kp RSHFT  &mo 1	   &kp RALT
            >;      
        };

		lower_layer {
		
			bindings = <
        &kp TAB	    &kp LS(GRAVE) &kp RA(F)	  &kp N6	    &kp N1	 &kp EQUAL			         &kp MINUS  &kp KP_N6  &kp KP_N7   &kp KP_N8  &kp KP_N9	 &kp PRCNT
        &kp RA(X)   &kp N2	      &kp N3	    &kp N4	    &kp N5     &kp RA(C)			       &kp KP_N0  &kp KP_N1  &kp KP_N2   &kp KP_N3  &kp KP_N4	 &kp KP_N5
&tog 2  &kp RA(N4)  &kp GRAVE     &kp RA(N2)  &kp RA(N3)  &kp RA(N4) &kp ENTER             &kp N0	    &kp N9     &kp N8	     &kp N7	    &kp RA(J)    &kp RA(U)   &mo 1  
                                  &trans      &trans      &trans     &trans                &trans     &trans     &trans      &trans
        			>;
	    	};

		raise_layer {
		
			bindings = <
        &kp TAB	    &kp LS(GRAVE) &kp KP_N7	  &kp KP_N9	  &kp KP_N8	 &kp EQUAL			       &kp MINUS  &kp KP_N6   &kp SPACE    &kp KP_N8   &kp KP_N9	&kp PRCNT
        &kp RA(X)   &kp KP_N4	    &kp KP_N3	  &kp KP_N2	  &kp KP_N1  &kp RA(C)			       &kp KP_N5  &kp KP_N5   &kp KP_N6    &kp KP_N7   &kp KP_N8  &kp KP_N5
&tog 2  &kp RA(N4)  &kp KP_N8     &kp KP_N7	  &kp KP_N6	  &kp KP_N5  &kp ENTER             &kp N0	    &kp KP_N1	  &kp KP_N2	   &kp KP_N3   &kp N8	    &kp N7	  &mo 1     
                                  &trans      &trans      &kp SPACE  &kp KP_N0             &trans     &trans      &trans       &trans
        			>;
	    	};
    };
};