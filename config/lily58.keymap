/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>


/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;

    combos {
        compatible = "zmk,combos";
        combo_flèche_haut {
            timeout-ms = <50>;
            key-positions = <15 27>;
            bindings = <&kp UP>;

    combos {
        compatible = "zmk,combos";
        combo_flèche_bas {
            timeout-ms = <50>;
            key-positions = <27 39>;
            bindings = <&kp DOWN>;
			
    combos {
        compatible = "zmk,combos";
        combo_flèche_gauche {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp LEFT>;

    combos {
        compatible = "zmk,combos";
        combo_flèche_droite {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp RIGHT>;
			
    combos {
        compatible = "zmk,combos";
        combo_supr {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DEL>;

    combos {
        compatible = "zmk,combos";
        combo_backspace {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp BSPC>;
			
    combos {
        compatible = "zmk,combos";
        combo_entr {
            timeout-ms = <50>;
            key-positions = <25 26 27 28>;
            bindings = <&kp ENTER>;	

    combos {
        compatible = "zmk,combos";
        combo_entr {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&kp ENTER>;	

    combos {
        compatible = "zmk,combos";
        combo_ctrl_z {
            timeout-ms = <50>;
            key-positions = <36 37>;
            bindings = <&kp LC(LBRC)>;
			
    combos {
        compatible = "zmk,combos";
        combo_ctrl_c {
            timeout-ms = <50>;
            key-positions = <38 39>;
            bindings = <&kp LC(H)>;	

    combos {
        compatible = "zmk,combos";
        combo_ctrl_v {
            timeout-ms = <50>;
            key-positions = <39 40>;
            bindings = <&kp LC(U)>;
							
    combos {
        compatible = "zmk,combos";
        combo_ctrl_s {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LC(K)>;
							
        };
    };
};

/ {
	keymap {
		compatible = "zmk,keymap";

		default_layer {
		
			bindings = <
&kp EQUAL &kp N1 &kp N2 &kp N3  &kp N4   &kp N5                           &kp N6     &kp N7  &kp N8    &kp N9    &kp N0 &kp MINUS
&kp TAB	  &kp Z	 &kp Q	&kp W	&kp V    &kp Y                            &kp B	     &kp U	 &kp O	   &kp APOS	 &kp C	&kp BSLH
&kp G	  &kp R	 &kp S	&kp A	&kp D	 &kp P                            &kp COMMA  &kp J	 &kp K	   &kp SEMI	 &kp L	&kp SLASH
&mo 1	  &kp M	 &kp X	&kp T	&kp E	 &kp NUBS   &kp BSPC	&kp ENTER &kp N	     &kp I	 &kp LBKT  &kp DOT   &kp H	&kp RBRC
                        &kp LALT&kp LCTRL&kp LSHFT	&kp F	    &kp SPACE &kp RSHFT	 &mo 1	 &kp RALT
			>;
		};

		lower_layer {
		
			bindings = <
&kp F1    &kp F2     &kp F3     &kp F4  &kp F5    &kp F6                          &kp F7    &kp F8     &kp F9      &kp F10    &kp F11    &kp F12
&kp TAB	  &kp DLLR	 &kp HASH	&kp AT	&kp N1	  &kp PRCNT			              &kp MINUS	&kp KP_N6  &kp KP_N7   &kp KP_N8  &kp KP_N9	 &kp PRCNT
&kp LBRC  &kp N2	 &kp N3	    &kp N4	&kp N5	  &kp RBRC			              &kp KP_N0	&kp KP_N1  &kp KP_N2   &kp KP_N3  &kp KP_N4	 &kp KP_N5
&kp LBKT  &kp TILDE2 &kp BSLH	&kp LT	&kp GT	  &kp RBKT	&kp BSPC	&kp ENTER &kp N0	&kp N9	   &kp N8	   &kp N7	  &kp RA(J)  &kp RA(U)
                                &trans  &trans    &trans    &trans      &trans    &trans    &trans     &trans
			>;
		};

		raise_layer {

			bindings = <
&kp F1  &kp F2  &kp F3    &kp F4   &kp F5    &kp F6                       &kp F7  &kp F8  &kp F9    &kp F10    &kp F11   &kp F12
&trans  &trans  &trans    &kp UP   &trans    &trans                       &trans  &trans  &trans    &trans     &trans    &trans
&trans  &trans  &kp LEFT  &kp DOWN &kp RIGHT &trans                       &trans  &trans  &kp K_PWR	&kp K_SLEEP&trans    &trans
&trans  &trans  &trans    &trans   &trans    &trans    &trans   &trans    &trans  &trans  &trans    &trans     &kp LWIN  &trans
                          &trans   &trans    &trans    &trans   &trans    &trans  &trans  &trans
			>;


		};
	};
};
